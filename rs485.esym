D G "__PCH__" 0 0 ""5.008""
D G "__DEVICE__" 0 0 ""
D G "__DATE__" 0 0 ""04-dez-14""
D G "__TIME__" 0 0 ""16:45:38"" "* rs485.c"
c L "set_tris_a" 0 1 1 "*"
c L "set_tris_a" 0 1 1 "*"
c L "set_tris_a" 1 1 17 "FUNCTION"
v L "value" 1 31 "int8" `54 
f B "set_tris_a" 1 31 "void(int8 value)" `53 
v L "value" 1 32 "int8" `56 
f B "set_tris_b" 1 32 "void(int8 value)" `55 
v L "value" 1 33 "int8" `58 
f B "set_tris_c" 1 33 "void(int8 value)" `57 
v L "value" 1 34 "int8" `60 
f B "set_tris_d" 1 34 "void(int8 value)" `59 
v L "value" 1 35 "int8" `62 
f B "set_tris_e" 1 35 "void(int8 value)" `61 
f B "get_tris_a" 1 36 "int8()" `63 
f B "get_tris_b" 1 37 "int8()" `64 
f B "get_tris_c" 1 38 "int8()" `65 
f B "get_tris_d" 1 39 "int8()" `66 
f B "get_tris_e" 1 40 "int8()" `67 
v L "value" 1 41 "int8" `69 
f B "output_a" 1 41 "void(int8 value)" `68 
v L "value" 1 42 "int8" `71 
f B "output_b" 1 42 "void(int8 value)" `70 
v L "value" 1 43 "int8" `73 
f B "output_c" 1 43 "void(int8 value)" `72 
v L "value" 1 44 "int8" `75 
f B "output_d" 1 44 "void(int8 value)" `74 
v L "value" 1 45 "int8" `77 
f B "output_e" 1 45 "void(int8 value)" `76 
f B "input_a" 1 46 "int8()" `78 
f B "input_b" 1 47 "int8()" `79 
f B "input_c" 1 48 "int8()" `80 
f B "input_d" 1 49 "int8()" `81 
f B "input_e" 1 50 "int8()" `82 
f B "input_change_a" 1 51 "int8()" `83 
f B "input_change_b" 1 52 "int8()" `84 
f B "input_change_c" 1 53 "int8()" `85 
f B "input_change_d" 1 54 "int8()" `86 
f B "input_change_e" 1 55 "int8()" `87 
v L "pin" 1 56 "int16" `89 
f B "input" 1 56 "int8(int16 pin)" `88 
v L "pin" 1 57 "int16" `91 
f B "input_state" 1 57 "int8(int16 pin)" `90 
v L "pin" 1 58 "int16" `93 
f B "output_low" 1 58 "void(int16 pin)" `92 
v L "pin" 1 59 "int16" `95 
f B "output_high" 1 59 "void(int16 pin)" `94 
v L "pin" 1 60 "int16" `97 
f B "output_toggle" 1 60 "void(int16 pin)" `96 
v L "pin" 1 61 "int16" `99 
v L "level" 1 61 "int8" `100 
f B "output_bit" 1 61 "void(int16 pin,int8 level)" `98 
v L "pin" 1 62 "int16" `102 
f B "output_float" 1 62 "void(int16 pin)" `101 
v L "pin" 1 63 "int16" `104 
f B "output_drive" 1 63 "void(int16 pin)" `103  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 67 "31744"
d G "PIN_A1" 1 68 "31745"
d G "PIN_A2" 1 69 "31746"
d G "PIN_A3" 1 70 "31747"
d G "PIN_A4" 1 71 "31748"
d G "PIN_A5" 1 72 "31749"
d G "PIN_A6" 1 73 "31750"
d G "PIN_B0" 1 75 "31752"
d G "PIN_B1" 1 76 "31753"
d G "PIN_B2" 1 77 "31754"
d G "PIN_B3" 1 78 "31755"
d G "PIN_B4" 1 79 "31756"
d G "PIN_B5" 1 80 "31757"
d G "PIN_B6" 1 81 "31758"
d G "PIN_B7" 1 82 "31759"
d G "PIN_C0" 1 84 "31760"
d G "PIN_C1" 1 85 "31761"
d G "PIN_C2" 1 86 "31762"
d G "PIN_C3" 1 87 "31763"
d G "PIN_C4" 1 88 "31764"
d G "PIN_C5" 1 89 "31765"
d G "PIN_C6" 1 90 "31766"
d G "PIN_C7" 1 91 "31767"
d G "PIN_D0" 1 93 "31768"
d G "PIN_D1" 1 94 "31769"
d G "PIN_D2" 1 95 "31770"
d G "PIN_D3" 1 96 "31771"
d G "PIN_D4" 1 97 "31772"
d G "PIN_D5" 1 98 "31773"
d G "PIN_D6" 1 99 "31774"
d G "PIN_D7" 1 100 "31775"
d G "PIN_E0" 1 102 "31776"
d G "PIN_E1" 1 103 "31777"
d G "PIN_E2" 1 104 "31778"
d G "FALSE" 1 107 "0"
d G "TRUE" 1 108 "1"
d G "BYTE" 1 110 "int8"
d G "BOOLEAN" 1 111 "int1"
d G "getc" 1 113 "getch"
d G "fgetc" 1 114 "getch"
d G "getchar" 1 115 "getch"
d G "putc" 1 116 "putchar"
d G "fputc" 1 117 "putchar"
d G "fgets" 1 118 "gets"
d G "fputs" 1 119 "puts"
c L "output_drive" 1 1 3 "FUNCTION"
f B "restart_cause" 1 124 "int8()" `105 
f B "reset_cpu" 1 125 "void()" `106 
f B "sleep" 1 126 "void()" `107  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 1 128 "7"
d G "MCLR_FROM_SLEEP" 1 129 "11"
d G "MCLR_FROM_RUN" 1 130 "15"
d G "NORMAL_POWER_UP" 1 131 "12"
d G "BROWNOUT_RESTART" 1 132 "14"
d G "WDT_FROM_SLEEP" 1 133 "3"
d G "RESET_INSTRUCTION" 1 134 "0"
c L "sleep" 1 1 5 "FUNCTION"
v L "mode" 1 141 "int8" `109 
f B "setup_timer_0" 1 141 "void(int8 mode)" `108 
v L "value" 1 142 "int16" `111 
f B "set_timer0" 1 142 "void(int16 value)" `110 
f B "get_timer0" 1 143 "int16()" `112 
v L "mode" 1 144 "int8" `114 
v L "prescaler" 1 144 "int8" `115 
f B "setup_counters" 1 144 "void(int8 mode,int8 prescaler)" `113 
v L "value" 1 145 "int16" `117 
f B "set_rtcc" 1 145 "void(int16 value)" `116 
f B "get_rtcc" 1 146 "int16()" `118  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 148 "0"
d G "T0_EXT_L_TO_H" 1 149 "32"
d G "T0_EXT_H_TO_L" 1 150 "48"
d G "T0_DIV_1" 1 152 "8"
d G "T0_DIV_2" 1 153 "0"
d G "T0_DIV_4" 1 154 "1"
d G "T0_DIV_8" 1 155 "2"
d G "T0_DIV_16" 1 156 "3"
d G "T0_DIV_32" 1 157 "4"
d G "T0_DIV_64" 1 158 "5"
d G "T0_DIV_128" 1 159 "6"
d G "T0_DIV_256" 1 160 "7"
d G "T0_OFF" 1 162 "0x80"
d G "T0_8_BIT" 1 164 "0x40"
d G "RTCC_INTERNAL" 1 166 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 1 167 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 1 168 "48"
d G "RTCC_DIV_1" 1 169 "8"
d G "RTCC_DIV_2" 1 170 "0"
d G "RTCC_DIV_4" 1 171 "1"
d G "RTCC_DIV_8" 1 172 "2"
d G "RTCC_DIV_16" 1 173 "3"
d G "RTCC_DIV_32" 1 174 "4"
d G "RTCC_DIV_64" 1 175 "5"
d G "RTCC_DIV_128" 1 176 "6"
d G "RTCC_DIV_256" 1 177 "7"
d G "RTCC_OFF" 1 178 "0x80"
d G "RTCC_8_BIT" 1 179 "0x40"
c L "get_rtcc" 1 1 8 "FUNCTION"
v L "mode" 1 190 "int16" `120 
f B "setup_wdt" 1 190 "void(int16 mode)" `119 
f B "restart_wdt" 1 191 "void()" `121  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 1 193 "0x100"
d G "WDT_OFF" 1 194 "0"
d G "WDT_18MS" 1 196 "0x300"
d G "WDT_36MS" 1 197 "0x500"
d G "WDT_72MS" 1 198 "0x700"
d G "WDT_144MS" 1 199 "0x900"
d G "WDT_288MS" 1 200 "0xB00"
d G "WDT_576MS" 1 201 "0xD00"
d G "WDT_1152MS" 1 202 "0xF00"
d G "WDT_2304MS" 1 203 "0x1108"
c L "restart_wdt" 1 1 3 "FUNCTION"
v L "mode" 1 209 "int16" `123 
f B "setup_timer_1" 1 209 "void(int16 mode)" `122 
f B "get_timer1" 1 210 "int16()" `124 
v L "value" 1 211 "int16" `126 
f B "set_timer1" 1 211 "void(int16 value)" `125  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 214 "0"
d G "T1_INTERNAL" 1 215 "0x85"
d G "T1_EXTERNAL" 1 216 "0x87"
d G "T1_EXTERNAL_SYNC" 1 217 "0x83"
d G "T1_CLK_OUT" 1 219 "8"
d G "T1_DIV_BY_1" 1 221 "0"
d G "T1_DIV_BY_2" 1 222 "0x10"
d G "T1_DIV_BY_4" 1 223 "0x20"
d G "T1_DIV_BY_8" 1 224 "0x30"
c L "set_timer1" 1 1 3 "FUNCTION"
v L "mode" 1 229 "int8" `128 
v L "period" 1 229 "int8" `129 
v L "postscale" 1 229 "int8" `130 
f B "setup_timer_2" 1 229 "void(int8 mode,int8 period,int8 postscale)" `127 
f B "get_timer2" 1 230 "int8()" `131 
v L "value" 1 231 "int8" `133 
f B "set_timer2" 1 231 "void(int8 value)" `132  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 233 "0"
d G "T2_DIV_BY_1" 1 234 "4"
d G "T2_DIV_BY_4" 1 235 "5"
d G "T2_DIV_BY_16" 1 236 "6"
c L "set_timer2" 1 1 3 "FUNCTION"
v L "mode" 1 241 "int16" `135 
f B "setup_timer_3" 1 241 "void(int16 mode)" `134 
f B "get_timer3" 1 242 "int16()" `136 
v L "value" 1 243 "int16" `138 
f B "set_timer3" 1 243 "void(int16 value)" `137  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 1 246 "0"
d G "T3_INTERNAL" 1 247 "0x85"
d G "T3_EXTERNAL" 1 248 "0x87"
d G "T3_EXTERNAL_SYNC" 1 249 "0x83"
d G "T3_DIV_BY_1" 1 251 "0"
d G "T3_DIV_BY_2" 1 252 "0x10"
d G "T3_DIV_BY_4" 1 253 "0x20"
d G "T3_DIV_BY_8" 1 254 "0x30"
c L "set_timer3" 1 1 4 "FUNCTION"
v L "mode" 1 260 "int32" `140 
f B "setup_ccp1" 1 260 "void(int32 mode)" `139 
v L "mode" 1 261 "int32" `142 
v L "pwm" 1 261 "int8" `143 
f G "setup_ccp1" 1 261 "void(int32 mode,int8 pwm)" `141 
v L "value" 1 262 "int16" `145 
f B "set_pwm1_duty" 1 262 "void(int16 value)" `144  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 264 "0"
d G "CCP_CAPTURE_FE" 1 265 "4"
d G "CCP_CAPTURE_RE" 1 266 "5"
d G "CCP_CAPTURE_DIV_4" 1 267 "6"
d G "CCP_CAPTURE_DIV_16" 1 268 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 1 269 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 270 "9"
d G "CCP_COMPARE_INT" 1 271 "0xA"
d G "CCP_COMPARE_INT_AND_TOGGLE" 1 272 "0x2"
d G "CCP_COMPARE_RESET_TIMER" 1 273 "0xB"
d G "CCP_PWM" 1 274 "0xC"
d G "CCP_PWM_PLUS_1" 1 275 "0x1c"
d G "CCP_PWM_PLUS_2" 1 276 "0x2c"
d G "CCP_PWM_PLUS_3" 1 277 "0x3c"
c L "set_pwm1_duty" 1 1 1 "FUNCTION"
d G "T3_CCP1_TO_2" 1 283 "0x48"
d G "T3_CCP2" 1 284 "0x8"
c L "set_pwm1_duty" 1 1 1 "FUNCTION"
v L "mode" 1 288 "int32" `150 
f B "setup_ccp2" 1 288 "void(int32 mode)" `149 
v L "mode" 1 289 "int32" `152 
v L "pwm" 1 289 "int8" `153 
f G "setup_ccp2" 1 289 "void(int32 mode,int8 pwm)" `151 
v L "value" 1 290 "int16" `155 
f B "set_pwm2_duty" 1 290 "void(int16 value)" `154 
c L "set_pwm2_duty" 1 1 5 "FUNCTION"
v L "mode" 1 299 "int8" `160 
f B "setup_psp" 1 299 "void(int8 mode)" `159 
f B "psp_output_full" 1 300 "int8()" `161 
f B "psp_input_full" 1 301 "int8()" `162 
f B "psp_overflow" 1 302 "int8()" `163  "Constants used in SETUP_PSP() are:"
d G "PSP_ENABLED" 1 304 "0x10"
d G "PSP_DISABLED" 1 305 "0"
c L "psp_overflow" 1 1 3 "FUNCTION"
v L "mode" 1 312 "int32" `166 
f B "setup_spi" 1 312 "void(int32 mode)" `165 
v L "value" 1 313 "int8" `168 
f B "spi_write" 1 313 "void(int8 value)" `167 
f B "spi_read" 1 314 "int8()" `169 
v L "value" 1 315 "int8" `171 
f G "spi_read" 1 315 "int8(int8 value)" `170 
f B "spi_data_in" 1 316 "int8()" `172  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 318 "0x00"
d G "SPI_MASTER" 1 319 "0x20"
d G "SPI_SLAVE" 1 320 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 321 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 322 "0x00"
d G "SPI_CLK_DIV_4" 1 323 "0x00"
d G "SPI_CLK_DIV_16" 1 324 "0x01"
d G "SPI_CLK_DIV_64" 1 325 "0x02"
d G "SPI_CLK_T2" 1 326 "0x03"
d G "SPI_SS_DISABLED" 1 327 "0x01"
d G "SPI_XMIT_L_TO_H" 1 329 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 330 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 332 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 333 "0x8000"
d G "SPI_L_TO_H" 1 336 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 337 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 1 1 2 "FUNCTION"
v L "baud" 1 341 "int32" `174 
f B "setup_uart" 1 341 "void(int32 baud)" `173 
v L "baud" 1 342 "int32" `176 
v L "stream" 1 342 "int8" `177 
f G "setup_uart" 1 342 "void(int32 baud,int8 stream)" `175 
v L "baud" 1 343 "int32" `179 
v L "stream" 1 343 "int8" `180 
v L "clock" 1 343 "int32" `181 
f G "setup_uart" 1 343 "void(int32 baud,int8 stream,int32 clock)" `178 
v L "baud" 1 344 "int32" `183 
f B "set_uart_speed" 1 344 "void(int32 baud)" `182 
v L "baud" 1 345 "int32" `185 
v L "stream" 1 345 "int8" `186 
f G "set_uart_speed" 1 345 "void(int32 baud,int8 stream)" `184 
v L "baud" 1 346 "int32" `188 
v L "stream" 1 346 "int8" `189 
v L "clock" 1 346 "int32" `190 
f G "set_uart_speed" 1 346 "void(int32 baud,int8 stream,int32 clock)" `187  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 350 "2"
d G "UART_DATA" 1 351 "4"
c L "set_uart_speed" 1 1 2 "FUNCTION"
v L "mode" 1 354 "int8" `192 
f B "setup_low_volt_detect" 1 354 "void(int8 mode)" `191  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 1 356 "0x1F"
d G "LVD_46" 1 357 "0x1E"
d G "LVD_43" 1 358 "0x1D"
d G "LVD_41" 1 359 "0x1C"
d G "LVD_40" 1 360 "0x1B"
d G "LVD_37" 1 361 "0x1A"
d G "LVD_36" 1 362 "0x19"
d G "LVD_34" 1 363 "0x18"
d G "LVD_31" 1 364 "0x17"
d G "LVD_29" 1 365 "0x16"
d G "LVD_28" 1 366 "0x15"
d G "LVD_26" 1 367 "0x14"
d G "LVD_25" 1 368 "0x13"
d G "LVD_23" 1 369 "0x12"
d G "LVD_21" 1 370 "0x11"
c L "setup_low_volt_detect" 1 1 2 "FUNCTION"
v L "mode" 1 376 "int8" `194 
f B "setup_oscillator" 1 376 "void(int8 mode)" `193  "Constants used in setup_oscillator() are:"
d G "OSC_TIMER1" 1 378 "1"
d G "OSC_NORMAL" 1 379 "0"
c L "setup_oscillator" 1 1 4 "FUNCTION"
v L "mode" 1 386 "int32" `196 
f B "setup_adc" 1 386 "void(int32 mode)" `195 
f B "read_adc" 1 387 "int8()" `197 
v L "mode" 1 388 "int8" `199 
f G "read_adc" 1 388 "int8(int8 mode)" `198 
f G "read_adc" 1 389 "int16()" `200 
v L "mode" 1 390 "int8" `202 
f G "read_adc" 1 390 "int16(int8 mode)" `201 
f B "adc_done" 1 391 "int8()" `203  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 393 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 394 "0x10000"
d G "ADC_CLOCK_DIV_4" 1 395 "0x4000"
d G "ADC_CLOCK_DIV_8" 1 396 "0x0040"
d G "ADC_CLOCK_DIV_16" 1 397 "0x4040"
d G "ADC_CLOCK_DIV_32" 1 398 "0x0080"
d G "ADC_CLOCK_DIV_64" 1 399 "0x4080"
d G "ADC_CLOCK_INTERNAL" 1 400 "0x00c0" "Internal 2-6us"
c L "adc_done" 1 1 1 "FUNCTION"
v L "setting" 1 403 "int8" `205 
f B "setup_adc_ports" 1 403 "void(int8 setting)" `204 
v L "channel" 1 404 "int8" `207 
f B "set_adc_channel" 1 404 "void(int8 channel)" `206  "Constants used in SETUP_ADC_PORTS() are:"
d G "NO_ANALOGS" 1 406 "7" "None"
d G "ALL_ANALOG" 1 407 "0" "A0 A1 A2 A3 A5 E0 E1 E2"
d G "AN0_AN1_AN2_AN4_AN5_AN6_AN7_VSS_VREF" 1 408 "1" "A0 A1 A2 A5 E0 E1 E2 VRefh=A3"
d G "AN0_AN1_AN2_AN3_AN4" 1 409 "2" "A0 A1 A2 A3 A5"
d G "AN0_AN1_AN2_AN4_VSS_VREF" 1 410 "3" "A0 A1 A2 A4 VRefh=A3"
d G "AN0_AN1_AN3" 1 411 "4" "A0 A1 A3"
d G "AN0_AN1_VSS_VREF" 1 412 "5" "A0 A1 VRefh=A3"
d G "AN0_AN1_AN4_AN5_AN6_AN7_VREF_VREF" 1 413 "0x08" "A0 A1 A5 E0 E1 E2 VRefh=A3 VRefl=A2"
d G "AN0_AN1_AN2_AN3_AN4_AN5" 1 414 "0x09" "A0 A1 A2 A3 A5 E0"
d G "AN0_AN1_AN2_AN4_AN5_VSS_VREF" 1 415 "0x0A" "A0 A1 A2 A5 E0 VRefh=A3"
d G "AN0_AN1_AN4_AN5_VREF_VREF" 1 416 "0x0B" "A0 A1 A5 E0 VRefh=A3 VRefl=A2"
d G "AN0_AN1_AN4_VREF_VREF" 1 417 "0x0C" "A0 A1 A4 VRefh=A3 VRefl=A2"
d G "AN0_AN1_VREF_VREF" 1 418 "0x0D" "A0 A1 VRefh=A3 VRefl=A2"
d G "AN0" 1 419 "0x0E" "A0"
d G "AN0_VREF_VREF" 1 420 "0x0F" "A0 VRefh=A3 VRefl=A2"
d G "ANALOG_RA3_REF" 1 421 "0x1" "!old only provided for compatibility"
d G "A_ANALOG" 1 422 "0x2" "!old only provided for compatibility"
d G "A_ANALOG_RA3_REF" 1 423 "0x3" "!old only provided for compatibility"
d G "RA0_RA1_RA3_ANALOG" 1 424 "0x4" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_REF" 1 425 "0x5" "!old only provided for compatibility"
d G "ANALOG_RA3_RA2_REF" 1 426 "0x8" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2" 1 427 "0x9" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2_REF_RA3" 1 428 "0xA" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2_REF_RA3_RA2" 1 429 "0xB" "!old only provided for compatibility"
d G "A_ANALOG_RA3_RA2_REF" 1 430 "0xC" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_RA2_REF" 1 431 "0xD" "!old only provided for compatibility"
d G "RA0_ANALOG" 1 432 "0xE" "!old only provided for compatibility"
d G "RA0_ANALOG_RA3_RA2_REF" 1 433 "0xF" "!old only provided for compatibility"
d G "ADC_START_AND_READ" 1 436 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 437 "1"
d G "ADC_READ_ONLY" 1 438 "6"
c L "set_adc_channel" 1 1 3 "FUNCTION"
v L "x" 1 444 "sint8" `209 
f B "abs" 1 444 "sint8(sint8 x)" `208 
v L "x" 1 445 "sint16" `211 
f G "abs" 1 445 "sint16(sint16 x)" `210 
v L "x" 1 446 "sint32" `213 
f G "abs" 1 446 "sint32(sint32 x)" `212 
v L "x" 1 447 "float" `215 
f G "abs" 1 447 "float(float x)" `214 
v L "??65535" 1 448 "int8" `217 
v L "??65535" 1 448 "int8" `218 
f B "_mul" 1 448 "int16(int8 ,int8 )" `216 
v L "??65535" 1 449 "sint8" `217 
v L "??65535" 1 449 "sint8" `221 
f G "_mul" 1 449 "sint16(sint8 ,sint8 )" `219 
v L "??65535" 1 450 "int16" `217 
v L "??65535" 1 450 "int16" `224 
f G "_mul" 1 450 "int32(int16 ,int16 )" `222 
v L "??65535" 1 451 "sint16" `217 
v L "??65535" 1 451 "sint16" `227 
f G "_mul" 1 451 "sint32(sint16 ,sint16 )" `225  "Memory Manipulation Prototypes:"
v L "bank" 1 454 "int8" `229 
v L "offset" 1 454 "int8" `230 
f B "read_bank" 1 454 "int8(int8 bank,int8 offset)" `228 
v L "bank" 1 455 "int8" `232 
v L "offset" 1 455 "int8" `233 
v L "value" 1 455 "int8" `234 
f B "write_bank" 1 455 "void(int8 bank,int8 offset,int8 value)" `231 
v L "dest" 1 456 "*int8" `236 
v L "src" 1 456 "*int8" `237 
f B "strcpy" 1 456 "void(*int8 dest,*int8 src)" `235 
v L "dest" 1 457 "*int8" `239 
v L "src" 1 457 "*int8" `240 
f B "strcopy" 1 457 "void(*int8 dest,*int8 src)" `238 
v L "destination" 1 458 "*int8" `242 
v L "value" 1 458 "int8" `243 
v L "num" 1 458 "int16" `244 
f B "memset" 1 458 "void(*int8 destination,int8 value,int16 num)" `241 
v L "destination" 1 459 "*int8" `246 
v L "source" 1 459 "*int8" `247 
v L "num" 1 459 "int16" `248 
f B "memcpy" 1 459 "void(*int8 destination,*int8 source,int16 num)" `245  "String Prototypes:"
v L "cvalue" 1 462 "int8" `250 
f B "toupper" 1 462 "int8(int8 cvalue)" `249 
v L "cvalue" 1 463 "int8" `252 
f B "tolower" 1 463 "int8(int8 cvalue)" `251 
v L "string" 1 464 "*int8" `254 
v L "cstring" 1 464 "*int8" `255 
f B "sprintf" 1 464 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `253  "Data Manipulators Prototypes:"
v L "address" 1 467 "*int8" `258 
v L "bytes" 1 467 "int8" `259 
v L "value" 1 467 "int8" `260 
f B "shift_left" 1 467 "int8(*int8 address,int8 bytes,int8 value)" `257 
v L "address" 1 468 "*int8" `262 
v L "bytes" 1 468 "int8" `263 
v L "value" 1 468 "int8" `264 
f B "shift_right" 1 468 "int8(*int8 address,int8 bytes,int8 value)" `261 
v L "address" 1 469 "*int8" `266 
v L "bytes" 1 469 "int8" `267 
f B "rotate_left" 1 469 "void(*int8 address,int8 bytes)" `265 
v L "address" 1 470 "*int8" `269 
v L "bytes" 1 470 "int8" `270 
f B "rotate_right" 1 470 "void(*int8 address,int8 bytes)" `268 
v L "value" 1 471 "int8" `272 
f B "swap" 1 471 "void(int8 value)" `271 
v L "var" 1 472 "int16" `274 
v L "offset" 1 472 "int8" `275 
f B "make8" 1 472 "int8(int16 var,int8 offset)" `273 
v L "var" 1 473 "int32" `274 
v L "offset" 1 473 "int8" `278 
f G "make8" 1 473 "int8(int32 var,int8 offset)" `276 
v L "varhigh" 1 474 "int8" `280 
v L "varlow" 1 474 "int8" `281 
f B "make16" 1 474 "int16(int8 varhigh,int8 varlow)" `279 
v L "var1" 1 475 "int16" `283 
f B "make32" 1 475 "int32(int16 var1)" `282 
v L "var1" 1 476 "int16" `285 
v L "var2" 1 476 "int16" `286 
f G "make32" 1 476 "int32(int16 var1,int16 var2)" `284 
v L "var1" 1 477 "int16" `285 
v L "var2" 1 477 "int8" `289 
f G "make32" 1 477 "int32(int16 var1,int8 var2)" `287 
v L "var1" 1 478 "int16" `291 
v L "var2" 1 478 "int8" `292 
v L "var3" 1 478 "int8" `293 
f G "make32" 1 478 "int32(int16 var1,int8 var2,int8 var3)" `290 
v L "var1" 1 479 "int8" `295 
f G "make32" 1 479 "int32(int8 var1)" `294 
v L "var1" 1 480 "int8" `285 
v L "var2" 1 480 "int8" `298 
f G "make32" 1 480 "int32(int8 var1,int8 var2)" `296 
v L "var1" 1 481 "int8" `291 
v L "var2" 1 481 "int8" `292 
v L "var3" 1 481 "int8" `302 
f G "make32" 1 481 "int32(int8 var1,int8 var2,int8 var3)" `299 
v L "var1" 1 482 "int8" `304 
v L "var2" 1 482 "int8" `305 
v L "var3" 1 482 "int8" `306 
v L "var4" 1 482 "int8" `307 
f G "make32" 1 482 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `303 
v L "var1" 1 483 "int8" `285 
v L "var2" 1 483 "int16" `310 
f G "make32" 1 483 "int32(int8 var1,int16 var2)" `308 
v L "var1" 1 484 "int8" `291 
v L "var2" 1 484 "int16" `292 
v L "var3" 1 484 "int8" `314 
f G "make32" 1 484 "int32(int8 var1,int16 var2,int8 var3)" `311 
v L "var1" 1 485 "int8" `291 
v L "var2" 1 485 "int8" `292 
v L "var3" 1 485 "int16" `318 
f G "make32" 1 485 "int32(int8 var1,int8 var2,int16 var3)" `315 
v L "var" 1 486 "int8" `320 
v L "bit" 1 486 "int8" `321 
f B "bit_set" 1 486 "void(int8 var,int8 bit)" `319 
v L "var" 1 487 "int16" `320 
v L "bit" 1 487 "int8" `324 
f G "bit_set" 1 487 "void(int16 var,int8 bit)" `322 
v L "var" 1 488 "int32" `320 
v L "bit" 1 488 "int8" `327 
f G "bit_set" 1 488 "void(int32 var,int8 bit)" `325 
v L "var" 1 489 "int8" `329 
v L "bit" 1 489 "int8" `330 
f B "bit_clear" 1 489 "void(int8 var,int8 bit)" `328 
v L "var" 1 490 "int16" `329 
v L "bit" 1 490 "int8" `333 
f G "bit_clear" 1 490 "void(int16 var,int8 bit)" `331 
v L "var" 1 491 "int32" `329 
v L "bit" 1 491 "int8" `336 
f G "bit_clear" 1 491 "void(int32 var,int8 bit)" `334 
v L "var" 1 492 "int8" `338 
v L "bit" 1 492 "int8" `339 
f B "bit_test" 1 492 "int8(int8 var,int8 bit)" `337 
v L "var" 1 493 "int16" `338 
v L "bit" 1 493 "int8" `342 
f G "bit_test" 1 493 "int8(int16 var,int8 bit)" `340 
v L "var" 1 494 "int32" `338 
v L "bit" 1 494 "int8" `345 
f G "bit_test" 1 494 "int8(int32 var,int8 bit)" `343  "#use delay() Prototypes:"
v L "count" 1 497 "int8" `347 
f B "delay_cycles" 1 497 "void(int8 count)" `346 
v L "time" 1 498 "int16" `349 
f B "delay_ms" 1 498 "void(int16 time)" `348 
v L "time" 1 499 "int16" `351 
f B "delay_us" 1 499 "void(int16 time)" `350  "#use rs232() Prototypes:"
v L "cdata" 1 502 "int8" `353 
f B "putchar" 1 502 "void(int8 cdata)" `352 
v L "cdata" 1 503 "int8" `355 
v L "stream" 1 503 "int8" `356 
f G "putchar" 1 503 "void(int8 cdata,int8 stream)" `354 
v L "string" 1 504 "*int8" `358 
f B "puts" 1 504 "void(*int8 string)" `357 
v L "string" 1 505 "*int8" `360 
v L "stream" 1 505 "int8" `361 
f G "puts" 1 505 "void(*int8 string,int8 stream)" `359 
f B "getch" 1 506 "int8()" `362 
v L "stream" 1 507 "int8" `364 
f G "getch" 1 507 "int8(int8 stream)" `363 
v L "string" 1 508 "*int8" `366 
f B "gets" 1 508 "void(*int8 string)" `365 
v L "string" 1 509 "*int8" `368 
v L "stream" 1 509 "int8" `369 
f G "gets" 1 509 "void(*int8 string,int8 stream)" `367 
f B "kbhit" 1 510 "int8()" `370 
v L "stream" 1 511 "int8" `372 
f G "kbhit" 1 511 "int8(int8 stream)" `371 
v L "string" 1 512 "*int8" `374 
f B "printf" 1 512 "void(*int8 string,*int8 _VA_LIST)" `373 
v L "stream" 1 513 "int8" `377 
v L "string" 1 513 "*int8" `378 
f B "fprintf" 1 513 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `376 
f B "putc_send" 1 514 "void()" `380 
v L "stream" 1 515 "int8" `382 
f B "fputc_send" 1 515 "void(int8 stream)" `381 
f B "rcv_buffer_full" 1 516 "int8()" `383 
v L "stream" 1 517 "int8" `385 
f G "rcv_buffer_full" 1 517 "int8(int8 stream)" `384 
f B "rcv_buffer_bytes" 1 518 "int16()" `386 
v L "stream" 1 519 "int8" `388 
f G "rcv_buffer_bytes" 1 519 "int16(int8 stream)" `387 
f B "tx_buffer_full" 1 520 "int8()" `389 
v L "stream" 1 521 "int8" `391 
f G "tx_buffer_full" 1 521 "int8(int8 stream)" `390 
f B "tx_buffer_bytes" 1 522 "int16()" `392 
v L "stream" 1 523 "int8" `394 
f G "tx_buffer_bytes" 1 523 "int16(int8 stream)" `393  "#use i2c() Prototypes:"
f B "i2c_read" 1 526 "int8()" `395 
v L "stream" 1 527 "int8" `397 
f G "i2c_read" 1 527 "int8(int8 stream)" `396 
v L "stream" 1 528 "int8" `399 
v L "ack" 1 528 "int8" `400 
f G "i2c_read" 1 528 "int8(int8 stream,int8 ack)" `398 
v L "data" 1 529 "int8" `402 
f B "i2c_write" 1 529 "int8(int8 data)" `401 
v L "stream" 1 530 "int8" `404 
v L "data" 1 530 "int8" `405 
f G "i2c_write" 1 530 "int8(int8 stream,int8 data)" `403 
f B "i2c_start" 1 531 "void()" `406 
v L "stream" 1 532 "int8" `408 
f G "i2c_start" 1 532 "void(int8 stream)" `407 
v L "stream" 1 533 "int8" `410 
v L "restart" 1 533 "int8" `411 
f G "i2c_start" 1 533 "void(int8 stream,int8 restart)" `409 
f B "i2c_stop" 1 534 "void()" `412 
v L "stream" 1 535 "int8" `414 
f G "i2c_stop" 1 535 "void(int8 stream)" `413 
f B "i2c_isr_state" 1 536 "int8()" `415 
v L "addr" 1 537 "int8" `417 
f B "i2c_slaveaddr" 1 537 "void(int8 addr)" `416 
v L "stream" 1 538 "int8" `419 
v L "addr" 1 538 "int8" `420 
f G "i2c_slaveaddr" 1 538 "void(int8 stream,int8 addr)" `418 
f B "i2c_poll" 1 539 "int8()" `421 
v L "stream" 1 540 "int8" `423 
f G "i2c_poll" 1 540 "int8(int8 stream)" `422 
v L "baud" 1 541 "int32" `425 
f B "i2c_init" 1 541 "void(int32 baud)" `424 
v L "stream" 1 542 "int8" `427 
v L "baud" 1 542 "int32" `428 
f G "i2c_init" 1 542 "void(int8 stream,int32 baud)" `426  "#use spi() Prototypes:"
f B "spi_xfer" 1 545 "int8()" `429 
f G "spi_xfer" 1 546 "int16()" `430 
f G "spi_xfer" 1 547 "int32()" `431 
v L "data" 1 548 "int8" `433 
f G "spi_xfer" 1 548 "int8(int8 data)" `432 
v L "data" 1 549 "int16" `435 
f G "spi_xfer" 1 549 "int16(int16 data)" `434 
v L "data" 1 550 "int32" `437 
f G "spi_xfer" 1 550 "int32(int32 data)" `436 
v L "stream" 1 551 "int8" `439 
v L "data" 1 551 "int8" `440 
f G "spi_xfer" 1 551 "int8(int8 stream,int8 data)" `438 
v L "stream" 1 552 "int8" `439 
v L "data" 1 552 "int16" `443 
f G "spi_xfer" 1 552 "int16(int8 stream,int16 data)" `441 
v L "stream" 1 553 "int8" `439 
v L "data" 1 553 "int32" `446 
f G "spi_xfer" 1 553 "int32(int8 stream,int32 data)" `444 
v L "stream" 1 554 "int8" `448 
v L "data" 1 554 "int8" `449 
v L "bits" 1 554 "int8" `450 
f G "spi_xfer" 1 554 "int8(int8 stream,int8 data,int8 bits)" `447 
v L "stream" 1 555 "int8" `448 
v L "data" 1 555 "int16" `449 
v L "bits" 1 555 "int8" `454 
f G "spi_xfer" 1 555 "int16(int8 stream,int16 data,int8 bits)" `451 
v L "stream" 1 556 "int8" `448 
v L "data" 1 556 "int32" `449 
v L "bits" 1 556 "int8" `458 
f G "spi_xfer" 1 556 "int32(int8 stream,int32 data,int8 bits)" `455 
v L "baud" 1 557 "int32" `460 
f B "spi_init" 1 557 "void(int32 baud)" `459 
v L "stream" 1 558 "int8" `462 
v L "baud" 1 558 "int32" `463 
f G "spi_init" 1 558 "void(int8 stream,int32 baud)" `461 
v L "baud" 1 559 "int32" `465 
f B "spi_speed" 1 559 "void(int32 baud)" `464 
v L "stream" 1 560 "int8" `467 
v L "baud" 1 560 "int32" `468 
f G "spi_speed" 1 560 "void(int8 stream,int32 baud)" `466 
v L "stream" 1 561 "int8" `470 
v L "baud" 1 561 "int32" `471 
v L "clock" 1 561 "int32" `472 
f G "spi_speed" 1 561 "void(int8 stream,int32 baud,int32 clock)" `469 
v L "data" 1 562 "int8" `474 
f B "spi_prewrite" 1 562 "void(int8 data)" `473 
v L "data" 1 563 "int16" `476 
f G "spi_prewrite" 1 563 "void(int16 data)" `475 
v L "data" 1 564 "int32" `478 
f G "spi_prewrite" 1 564 "void(int32 data)" `477 
v L "??65535" 1 565 "int8" `480 
v L "data" 1 565 "int8" `481 
f G "spi_prewrite" 1 565 "void(int8 ,int8 data)" `479 
v L "??65535" 1 566 "int8" `480 
v L "data" 1 566 "int16" `484 
f G "spi_prewrite" 1 566 "void(int8 ,int16 data)" `482 
v L "??65535" 1 567 "int8" `480 
v L "data" 1 567 "int32" `487 
f G "spi_prewrite" 1 567 "void(int8 ,int32 data)" `485 
f B "spi_xfer_in" 1 568 "int8()" `488 
f G "spi_xfer_in" 1 569 "int16()" `489 
f G "spi_xfer_in" 1 570 "int32()" `490 
v L "bits" 1 571 "int8" `492 
f G "spi_xfer_in" 1 571 "int8(int8 bits)" `491 
v L "bits" 1 572 "int8" `494 
f G "spi_xfer_in" 1 572 "int16(int8 bits)" `493 
v L "bits" 1 573 "int8" `496 
f G "spi_xfer_in" 1 573 "int32(int8 bits)" `495 
v L "stream" 1 574 "int8" `498 
v L "bits" 1 574 "int8" `499 
f G "spi_xfer_in" 1 574 "int8(int8 stream,int8 bits)" `497 
v L "stream" 1 575 "int8" `498 
v L "bits" 1 575 "int8" `502 
f G "spi_xfer_in" 1 575 "int16(int8 stream,int8 bits)" `500 
v L "stream" 1 576 "int8" `498 
v L "bits" 1 576 "int8" `505 
f G "spi_xfer_in" 1 576 "int32(int8 stream,int8 bits)" `503  "#use rtos() Prototypes:"
f B "rtos_run" 1 579 "void()" `506 
f B "rtos_yield" 1 580 "void()" `507 
v L "task" 1 581 "int8" `509 
f B "rtos_enable" 1 581 "void(int8 task)" `508 
v L "task" 1 582 "int8" `511 
f B "rtos_disable" 1 582 "void(int8 task)" `510 
f B "rtos_terminate" 1 583 "void()" `512 
v L "flag" 1 584 "int8" `514 
f B "rtos_await" 1 584 "void(int8 flag)" `513 
v L "sem" 1 585 "int8" `516 
f B "rtos_wait" 1 585 "void(int8 sem)" `515 
v L "sem" 1 586 "int8" `518 
f B "rtos_signal" 1 586 "void(int8 sem)" `517 
v L "task" 1 587 "int8" `520 
v L "msg" 1 587 "int8" `521 
f B "rtos_msg_send" 1 587 "void(int8 task,int8 msg)" `519 
f B "rtos_msg_read" 1 588 "int8()" `522 
f B "rtos_msg_poll" 1 589 "int8()" `523 
v L "task" 1 590 "int8" `525 
f B "rtos_overrun" 1 590 "int8(int8 task)" `524 
v L "task" 1 591 "int8" `527 
v L "stat" 1 591 "*int8" `528 
f B "rtos_stats" 1 591 "void(int8 task,*int8 stat)" `526  "#use timer() Prototypes:"
f B "get_ticks" 1 594 "int8()" `529 
f G "get_ticks" 1 595 "int16()" `530 
f G "get_ticks" 1 596 "int32()" `531 
v L "stream" 1 597 "int8" `533 
f G "get_ticks" 1 597 "int8(int8 stream)" `532 
v L "stream" 1 598 "int8" `535 
f G "get_ticks" 1 598 "int16(int8 stream)" `534 
v L "stream" 1 599 "int8" `537 
f G "get_ticks" 1 599 "int32(int8 stream)" `536 
v L "value" 1 600 "int8" `539 
f B "set_ticks" 1 600 "void(int8 value)" `538 
v L "value" 1 601 "int16" `541 
f G "set_ticks" 1 601 "void(int16 value)" `540 
v L "value" 1 602 "int32" `543 
f G "set_ticks" 1 602 "void(int32 value)" `542 
v L "stream" 1 603 "int8" `545 
v L "value" 1 603 "int8" `546 
f G "set_ticks" 1 603 "void(int8 stream,int8 value)" `544 
v L "stream" 1 604 "int8" `545 
v L "value" 1 604 "int16" `549 
f G "set_ticks" 1 604 "void(int8 stream,int16 value)" `547 
v L "stream" 1 605 "int8" `545 
v L "value" 1 605 "int32" `552 
f G "set_ticks" 1 605 "void(int8 stream,int32 value)" `550  "#use pwm() Prototypes:"
f B "pwm_on" 1 608 "void()" `553 
v L "stream" 1 609 "int8" `555 
f G "pwm_on" 1 609 "void(int8 stream)" `554 
f B "pwm_off" 1 610 "void()" `556 
v L "stream" 1 611 "int8" `558 
f G "pwm_off" 1 611 "void(int8 stream)" `557 
v L "duty" 1 612 "int16" `560 
f B "pwm_set_duty" 1 612 "void(int16 duty)" `559 
v L "stream" 1 613 "int8" `562 
v L "duty" 1 613 "int16" `563 
f G "pwm_set_duty" 1 613 "void(int8 stream,int16 duty)" `561 
v L "percent" 1 614 "int16" `565 
f B "pwm_set_duty_percent" 1 614 "void(int16 percent)" `564 
v L "stream" 1 615 "int8" `567 
v L "percent" 1 615 "int16" `568 
f G "pwm_set_duty_percent" 1 615 "void(int8 stream,int16 percent)" `566 
v L "frequency" 1 616 "int32" `570 
f B "pwm_set_frequency" 1 616 "void(int32 frequency)" `569 
v L "stream" 1 617 "int8" `572 
v L "frequency" 1 617 "int32" `573 
f G "pwm_set_frequency" 1 617 "void(int8 stream,int32 frequency)" `571  "#use capture() Prototypes:"
f B "get_capture_time" 1 620 "int16()" `574 
v L "stream" 1 621 "int8" `576 
f G "get_capture_time" 1 621 "int16(int8 stream)" `575 
f B "get_capture_event" 1 622 "int8()" `577 
v L "stream" 1 623 "int8" `579 
f G "get_capture_event" 1 623 "int8(int8 stream)" `578  "Enviroment Prototypes:"
c L "get_capture_event" 1 1 2 "FUNCTION"
v L "address" 1 636 "int16" `581 
f B "goto_address" 1 636 "void(int16 address)" `580 
v L "label" 1 637 "int16" `583 
f B "label_address" 1 637 "int16(int16 label)" `582  "Program Memory Prototypes:"
v L "address" 1 640 "int16" `585 
v L "dataptr" 1 640 "*int8" `586 
v L "count" 1 640 "int16" `587 
f B "read_program_memory" 1 640 "void(int16 address,*int8 dataptr,int16 count)" `584 
v L "address" 1 641 "int16" `589 
f B "read_program_eeprom" 1 641 "int16(int16 address)" `588 
v L "address" 1 642 "int16" `591 
f B "erase_program_eeprom" 1 642 "void(int16 address)" `590 
v L "address" 1 643 "int16" `593 
v L "dataptr" 1 643 "*int8" `594 
v L "count" 1 643 "int16" `595 
f B "write_program_memory" 1 643 "void(int16 address,*int8 dataptr,int16 count)" `592 
v L "address" 1 644 "int16" `597 
v L "data" 1 644 "int16" `598 
f B "write_program_eeprom" 1 644 "void(int16 address,int16 data)" `596  "EEPROM Prototypes:"
t G "__EEADDRESS__" 1 649 "int16" `599 
v L "address" 1 654 "__EEADDRESS__" `601 
f B "read_eeprom" 1 654 "int8(__EEADDRESS__ address)" `600 
v L "address" 1 655 "__EEADDRESS__" `603 
v L "value" 1 655 "int8" `604 
f B "write_eeprom" 1 655 "void(__EEADDRESS__ address,int8 value)" `602  "INT"
c L "write_eeprom" 1 1 4 "FUNCTION"
v L "interrupt" 1 662 "int32" `606 
f B "enable_interrupts" 1 662 "void(int32 interrupt)" `605 
v L "interrupt" 1 663 "int32" `608 
f B "disable_interrupts" 1 663 "void(int32 interrupt)" `607 
v L "interrupt" 1 664 "int32" `610 
f B "clear_interrupt" 1 664 "void(int32 interrupt)" `609 
v L "interrupt" 1 665 "int32" `612 
f B "interrupt_active" 1 665 "int8(int32 interrupt)" `611 
v L "source" 1 666 "int8" `614 
v L "edge" 1 666 "int8" `615 
f B "ext_int_edge" 1 666 "void(int8 source,int8 edge)" `613 
v L "address" 1 667 "int16" `617 
f B "jump_to_irs" 1 667 "void(int16 address)" `616  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 669 "0x40"
d G "H_TO_L" 1 670 "0"
d G "GLOBAL" 1 672 "0xF2C0"
d G "PERIPH" 1 673 "0xF240"
d G "INT_RTCC" 1 674 "0x00F220"
d G "INT_TIMER0" 1 675 "0x00F220"
d G "INT_TIMER1" 1 676 "0x009D01"
d G "INT_TIMER2" 1 677 "0x009D02"
d G "INT_TIMER3" 1 678 "0x00A002"
d G "INT_EXT_L2H" 1 679 "0x5000F210"
d G "INT_EXT_H2L" 1 680 "0x6000F210"
d G "INT_EXT" 1 681 "0x00F210"
d G "INT_EXT1_L2H" 1 682 "0x5001F008"
d G "INT_EXT1_H2L" 1 683 "0x6001F008"
d G "INT_EXT1" 1 684 "0x00F008"
d G "INT_EXT2_L2H" 1 685 "0x5002F010"
d G "INT_EXT2_H2L" 1 686 "0x6002F010"
d G "INT_EXT2" 1 687 "0x00F010"
d G "INT_RB" 1 688 "0x00FFF208"
d G "INT_PSP" 1 689 "0x009D80"
d G "INT_AD" 1 690 "0x009D40"
d G "INT_RDA" 1 691 "0x009D20"
d G "INT_TBE" 1 692 "0x009D10"
d G "INT_SSP" 1 693 "0x009D08"
d G "INT_CCP1" 1 694 "0x009D04"
d G "INT_CCP2" 1 695 "0x00A001"
d G "INT_BUSCOL" 1 696 "0x00A008"
d G "INT_LOWVOLT" 1 697 "0x00A004"
d G "INT_EEPROM" 1 698 "0x00A010"
C L "jump_to_irs" 2 1 1 "*"
C L "jump_to_irs" 2 1 1 "*"
D G "read_coils" 2 8 "0x01"
D G "read_discrete_inputs" 2 9 "0x02"
D G "read_holding_registers" 2 10 "0x03"
D G "read_input_registers" 2 11 "0x04"
D G "write_single_coil" 2 12 "0x05"
D G "write_single_register" 2 13 "0x06"
D G "write_multiple_coils" 2 14 "0x0F"
D G "Write_multiple_registers" 2 15 "0x10"
D G "request_size" 2 17 "8"
T G "s_req_type" 2 24 "{int8 addr,int8 cmd,int16 from,int16 to}" `632 
T G "s_un_req_type" 2 29 "{s_req_type structure,int8[6] string}" `636 
T G "req_type" 2 37 "{int8 addr,int8 cmd,int16 from,int16 to,int16 crc}" `643 
T G "req_un_type" 2 42 "{req_type structure,int8[8] string}" `647 
V G "wCRCTable" 2 44 "[1]" `648 
V L "nData" 2 74 "*int8" `652 
V L "wLength" 2 74 "int16" `653 
F G "CRC16" 2 74 "int16(*int8 nData,int16 wLength)" `651 
V L "nTemp" 2 75 "int8" `654 
V L "wCRCWord" 2 76 "int16" `655 
V L "in" 2 87 "int16" `657 
F G "troca" 2 87 "int16(int16 in)" `656 
V L "dev_addr" 2 91 "int8" `659 
V L "from" 2 91 "int16" `660 
V L "to" 2 91 "int16" `661 
F G "make_read_request" 2 91 "*int8(int8 dev_addr,int16 from,int16 to)" `658 
V L "pre_request" 2 96 "s_un_req_type" `662 
V L "request" 2 103 "req_un_type" `663 
V L "output" 2 114 "*int8" `665 
F G "send_request" 2 114 "int8(*int8 output)" `664 
V L "i" 2 115 "int8" `666 
V G "request" 0 17 "*int8" `667 
F G "MAIN" 0 19 "int8()" `668 
V L "i" 0 21 "int8" `669 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "setup_psp" 1 0
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
